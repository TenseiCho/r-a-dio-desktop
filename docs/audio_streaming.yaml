title: R/a/dio Desktop Audio Streaming Implementation
description: Technical documentation of the audio streaming solution

application_structure:
  frontend:
    framework: "React + TypeScript"
    key_files:
      App.tsx:
        purpose: "Main UI component"
        features:
          - "Play/Stop button"
          - "Volume slider"
          - "State management using React hooks"
        commands:
          toggle_playback: "Invokes Rust backend to start/stop stream"
          set_volume: "Controls audio volume through Rust backend"

  backend:
    framework: "Tauri + Rust"
    key_files:
      lib.rs:
        purpose: "Core backend initialization and state management"
        components:
          State:
            type: "Arc<Mutex<AudioManager>>"
            purpose: "Thread-safe audio state container"
        commands:
          toggle_playback: "Handles play/stop requests from frontend"
          set_volume: "Manages volume control requests"
      
      audio.rs:
        purpose: "Audio streaming and playback management"
        components:
          AudioManager:
            state:
              sink: "Option<Arc<Sink>> - Audio output handler"
              _stream: "Option<(OutputStream, OutputStreamHandle)>"
              is_playing: "bool - Playback state tracker"
            methods:
              start: "Initializes streaming in new thread"
              stop: "Terminates playback"
              set_volume: "Adjusts audio volume"

architecture:
  overview: |
    The application uses a multi-threaded approach to handle continuous MP3 streaming
    from an internet radio source, using rodio for audio playback and reqwest for
    HTTP streaming.

  communication_flow:
    1: "User interacts with React UI"
    2: "Tauri commands bridge UI to Rust backend"
    3: "State struct manages thread-safe access to AudioManager"
    4: "AudioManager handles actual streaming in separate thread"

components:
  AudioManager:
    purpose: "Manages audio playback state and streaming operations"
    key_components:
      - sink: "Handles audio output (wrapped in Arc for thread safety)"
      - _stream: "Maintains the audio output stream connection"
      - is_playing: "Tracks playback state"

streaming_implementation:
  buffer_strategy:
    buffer_size: 8192  # 8 KB
    reason: "Small enough for low latency, large enough for efficient reading"
    
  process_flow:
    1: "Create audio output stream and sink"
    2: "Spawn dedicated streaming thread"
    3: "Establish HTTP connection to radio stream"
    4: "Read stream in small chunks (8KB)"
    5: "Decode each chunk as MP3"
    6: "Feed decoded audio to sink for playback"

thread_safety_measures:
  State:
    wrapper: "Arc<Mutex<>>"
    purpose: "Thread-safe access to AudioManager"
    
  AudioManager:
    sink_sharing: "Arc<Sink>"
    purpose: "Allow both UI and streaming threads to access sink"
    traits:
      - "unsafe impl Send"
      - "unsafe impl Sync"

technical_details:
  buffer_handling:
    read_strategy: "Continuous small chunks"
    chunk_processing: "Immediate decode and playback"
    memory_efficiency: "Only processes 8KB at a time"
  
  thread_management:
    main_thread: "Handles user interface and controls"
    streaming_thread: "Dedicated to continuous stream processing"
    communication: "Through Arc-wrapped sink"

dependencies:
  frontend:
    - "@tauri-apps/api: ^2"
    - "react: ^18.2.0"
    - "typescript: ^5.2.2"
  
  backend:
    - "tauri: 2"
    - "rodio: 0.17"
    - "reqwest: 0.11"
    - "parking_lot: 0.12"

benefits:
  - "Low memory usage due to chunk-based processing"
  - "Responsive playback control"
  - "Clean shutdown capability"
  - "Thread-safe operation"
  - "Efficient streaming without buffering entire stream"

limitations:
  - "No seeking capability (not needed for live radio)"
  - "Requires restart for connection issues"
  - "Basic error handling"

future_improvements:
  - "Add automatic reconnection"
  - "Implement metadata extraction"
  - "Add error recovery mechanisms"
  - "Improve buffer size handling"
  - "Add stream quality selection"
  - "Implement track information display"
